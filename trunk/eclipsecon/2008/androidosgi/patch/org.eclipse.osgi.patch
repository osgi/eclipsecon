Index: launch/.options
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/launch/.options,v
retrieving revision 1.2
diff -u -r1.2 .options
--- launch/.options	4 Dec 2003 18:16:22 -0000	1.2
+++ launch/.options	9 Mar 2008 20:05:15 -0000
@@ -1,4 +1,4 @@
-org.eclipse.osgi/debug=false
+org.eclipse.osgi/debug=true
 
 org.eclipse.osgi/debug/loader=false
 org.eclipse.osgi/debug/events=false
Index: META-INF/MANIFEST.MF
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/META-INF/MANIFEST.MF,v
retrieving revision 1.57
diff -u -r1.57 MANIFEST.MF
--- META-INF/MANIFEST.MF	22 Feb 2008 15:29:04 -0000	1.57
+++ META-INF/MANIFEST.MF	9 Mar 2008 20:05:15 -0000
@@ -57,7 +57,7 @@
 Bundle-Description: %systemBundle
 Bundle-Copyright: %copyright
 Bundle-Vendor: %eclipse.org
-Bundle-Version: 3.4.0.qualifier
+Bundle-Version: 3.4.0
 Bundle-Localization: systembundle
 Bundle-DocUrl: http://www.eclipse.org
 Eclipse-ExtensibleAPI: true
Index: build.properties
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/build.properties,v
retrieving revision 1.26
diff -u -r1.26 build.properties
--- build.properties	17 Dec 2007 20:01:53 -0000	1.26
+++ build.properties	9 Mar 2008 20:05:14 -0000
@@ -31,3 +31,4 @@
            security/src/
 output.. = bin/
 jre.compilation.profile = J2SE-1.4
+jars.extra.classpath = platform:/plugin/androidosgi/android.jar
Index: .classpath
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/.classpath,v
retrieving revision 1.10
diff -u -r1.10 .classpath
--- .classpath	17 Dec 2007 20:01:53 -0000	1.10
+++ .classpath	9 Mar 2008 20:05:14 -0000
@@ -13,5 +13,6 @@
 	<classpathentry kind="lib" path="osgi/exceptions.jar"/>
 	<classpathentry kind="lib" path="osgi/ee.minimum.jar"/>
 	<classpathentry kind="lib" path="osgi/xmlParserAPIs.jar"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.project.AndroidClasspathContainerInitializer"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: .options
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/.options,v
retrieving revision 1.16
diff -u -r1.16 .options
--- .options	30 Jan 2008 21:01:04 -0000	1.16
+++ .options	9 Mar 2008 20:05:14 -0000
@@ -1,7 +1,7 @@
 #### Debugging options for org.eclipse.osgi
 
 # Turn on general debugging for org.eclipse.osgi
-org.eclipse.osgi/debug=false
+org.eclipse.osgi/debug=true
 # Prints out class loading debug information
 org.eclipse.osgi/debug/loader=false
 # Prints out event (FrameworkEvent/BundleEvent/ServiceEvent) and listener debug information
Index: defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.osgi/defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader.java,v
retrieving revision 1.6
diff -u -r1.6 DefaultClassLoader.java
--- defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader.java	17 Dec 2007 20:01:53 -0000	1.6
+++ defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader.java	9 Mar 2008 20:05:15 -0000
@@ -161,7 +161,32 @@
 		return new ClasspathEntry(bundlefile, createProtectionDomain(bundlefile, cpDomain));
 	}
 
+	static final DexHelper dexHelper;
+	static {
+		DexHelper dh;
+		try {
+			dh = new DexHelper();
+		} catch (Throwable e) {
+			if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+				Debug.println("BundleClassLoader create DexHelper failed."); //$NON-NLS-1$
+				Debug.printStackTrace(e);
+			}
+			dh = null;
+		}
+		dexHelper = dh;
+	}
+
 	public Class defineClass(String name, byte[] classbytes, ClasspathEntry classpathEntry, BundleEntry entry) {
+		if (dexHelper != null) {
+			try {
+				return dexHelper.defineClass(this, name, classpathEntry);
+			} catch (Throwable e) {
+				if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+					Debug.println("BundleClassLoader[" + delegate + "].dexHelper(" + name + ") failed."); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
+					Debug.printStackTrace(e);
+				}
+			}
+		}
 		return defineClass(name, classbytes, 0, classbytes.length, classpathEntry.getDomain());
 	}
 
Index: defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DexHelper.java
===================================================================
RCS file: defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DexHelper.java
diff -N defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DexHelper.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ defaultAdaptor/src/org/eclipse/osgi/internal/baseadaptor/DexHelper.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,71 @@
+package org.eclipse.osgi.internal.baseadaptor;
+
+import android.dalvik.DexFile;
+import org.eclipse.osgi.baseadaptor.bundlefile.BundleFile;
+import org.eclipse.osgi.baseadaptor.loader.ClasspathEntry;
+import org.eclipse.osgi.framework.debug.Debug;
+import org.eclipse.osgi.framework.util.KeyedElement;
+
+class DexHelper {
+	
+	DexHelper() throws Exception {
+		Class c = DexFile.class;
+	}
+
+	Class defineClass(ClassLoader cl, String name, ClasspathEntry classpathEntry) throws Exception {
+		String dexName = name.replace('.', '/');
+		if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+			Debug.println("DexHelper.defineClass(" + dexName + ")"); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+
+		DexFileHolder dfh = (DexFileHolder) classpathEntry.getUserObject(DexFileHolder.KEY);
+		if (dfh == null) {
+			BundleFile bf = classpathEntry.getBundleFile();
+			if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+				Debug.println("DexHelper.defineClass(" + dexName + ") create DexFileHolder for "+ bf); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			DexFile df = new DexFile(bf.getBaseFile());
+			if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+				Debug.println("DexHelper.defineClass(" + dexName + ") created DexFile "+ df); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			dfh = new DexFileHolder(df);
+			classpathEntry.addUserObject(dfh);
+		}
+		
+		DexFile df = dfh.getDexFile();
+		if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+			Debug.println("DexHelper.defineClass(" + dexName + ") from DexFile "+ df); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+		Class c = df.loadClass(dexName, cl);
+		if (Debug.DEBUG && Debug.DEBUG_LOADER) {
+			Debug.println("DexHelper.defineClass(" + dexName + ") defined "+ c); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+		return c;
+	}
+
+	static class DexFileHolder implements KeyedElement {
+		private final DexFile dexFile;
+		public static final Object KEY = new Object();
+		public static final int HASHCODE = KEY.hashCode();
+
+		DexFileHolder(DexFile dexFile) {
+			this.dexFile = dexFile;
+		}
+
+		public int getKeyHashCode() {
+			return HASHCODE;
+		}
+
+		public boolean compare(KeyedElement other) {
+			return other.getKey() == KEY;
+		}
+
+		public Object getKey() {
+			return KEY;
+		}
+
+		public DexFile getDexFile() {
+			return dexFile;
+		}
+	}
+}
